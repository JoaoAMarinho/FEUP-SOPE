4 - Clarify the difference between semaphores and mutexes.

R: Mutex is a locking mechanism whereas Semaphore is a signaling mechanism
    Mutex is just an object while Semaphore is an integer
    Mutex has no subtype whereas Semaphore has two types, which are counting semaphore and binary semaphore.
    Semaphore supports wait and signal operations modification, whereas Mutex is only modified by the process that may request or release a resource.
    Semaphore value is modified using wait () and signal () operations, on the other hand, Mutex operations are locked or unlocked.
Mutex:

Is a key to a toilet. One person can have the key - occupy the toilet - at the time. When finished, the person gives (frees) the key to the next person in the queue.

Officially: "Mutexes are typically used to serialise access to a section of re-entrant code that cannot be executed concurrently by more than one thread. A mutex object only allows one thread into a controlled section, forcing other threads which attempt to gain access to that section to wait until the first thread has exited from that section." Ref: Symbian Developer Library

(A mutex is really a semaphore with value 1.)

Semaphore:

Is the number of free identical toilet keys. Example, say we have four toilets with identical locks and keys. The semaphore count - the count of keys - is set to 4 at beginning (all four toilets are free), then the count value is decremented as people are coming in. If all toilets are full, ie. there are no free keys left, the semaphore count is 0. Now, when eq. one person leaves the toilet, semaphore is increased to 1 (one free key), and given to the next person in the queue.

Officially: "A semaphore restricts the number of simultaneous users of a shared resource up to a maximum number. Threads can request access to the resource (decrementing the semaphore), and can signal that they have finished using the resource (incrementing the semaphore)." Ref: Symbian Developer Library

5 
a) The big deal in this case is the type of wait, busy waiting, the processor is beeing used while the waiting process can not  enter the region. 

b) Two processes want to access shared memory at same time. In this example it does not occur, because one process needs to wait the variable turn to change in order to enter the region.

6
In the case the parent process is too fast, and sends the signal before the child arrives the pause statement, when the child processes that signal, then it will be waitting forever for a signal to arrive.

